introdução ao NoSQL

bloco23 aula 1

introdução ao NoSQL

Antes de detalhar cada ponto do conceito BASE , você precisa entender um termo importante que verá ao longo deste módulo: cluster . Um cluster, no contexto de banco de dados, se refere à capacidade de um conjunto de servidores ou instâncias se conectarem a um banco de dados. Uma instância é uma coleção de memória e processos que interagem com o banco de dados, que é o conjunto de arquivos físicos que realmente armazenam os dados.

O cluster oferece duas vantagens principais, especialmente em ambientes de banco de dados de alto volume:

**Tolerância a falhas ( Fault Tolerance ): como há mais de um servidor ou instância para os usuários se conectarem, o cluster oferece uma alternativa no caso de falha em um servidor. Quando se lida com dezenas de milhares de máquinas em um único centro de processamento de dados (CPD), também conhecido como data center, tais falhas são um problema presente;
**Balanceamento de carga ( Load Balancing ): o cluster geralmente é configurado para permitir que os usuários sejam automaticamente alocados ao servidor com o mínimo de uso para que, assim, se otimize o uso da estrutura disponível para o banco.

Detalhando o conceito BASE
Base Availability - BA
O banco de dados aparenta funcionar o tempo todo. Como existe o cluster, se um servidor falhar, o banco continuará funcionando por conta de outro servidor que suprirá essa falha;
Soft State - S
Não precisa estar consistente o tempo todo. Ou seja: com um banco distribuído em várias máquinas e todas sendo usadas com igual frequência para escrita e consulta, é possível que, em dado momento, uma máquina receba uma escrita e não tenha tido tempo de "repassar" essa escrita para as demais máquinas do banco. Assim, se um usuário consultar a máquina que já foi atualizada e outro o fizer numa máquina menos atualizada, os resultados, que deveriam ser iguais, serão diferentes. Imagine a sua timeline do Facebook : nela são exibidos os posts de seus amigos, porém nem todos os posts são exibidos exatamente ao mesmo tempo. Nesse caso, o que acontece é que a informação foi enviada ao banco de dados, mas nem todos os servidores do cluster têm essa mesma informação ao mesmo tempo. Isso permite que o banco de dados possa gerenciar mais informações de escrita sem ter que se preocupar em replicá-las em uma mesma operação;
Eventually Consistent - E
O sistema se torna consistente em algum momento. Como não temos a informação replicada "instantaneamente", esse ponto se encarrega de deixar o banco consistente "ao seu tempo". Isso porque, dependendo das configurações do cluster, essa replicação pode acontecer mais rapidamente ou não. Mas em algum momento as informações estarão consistentes e presentes em todos os servidores do cluster.
Uma outra característica marcante é a ausência de schema ou schema flexível. Isso quer dizer que não há necessidade de definição prévia do schema dos dados. Se por um lado isso torna muito mais dinâmico o processo de inclusão de novos atributos, por outro pode impactar a integridade desses dados. Não se preocupe: a seu tempo, todos esses conceitos ficarão bem mais claros.

NoSQL e suas classes

Os bancos de dados NoSQL estão divididos em quatro principais tipos (que, no contexto de banco de dados, são chamados de classes ):

Chave / Valor - Key / Value
Família de Colunas - Column Family
Documentos - Document
Grafos - Graph

Cada uma desses classes tem aplicações diferentes, e devemos sempre observar as características da classe para tirar o melhor proveito dela.

***************************
Chave / Valor - Key / Value

Essa primeira classe é considerada a mais simples. Os dados são armazenados num esquema de registros compostos por uma chave (identificador do registro) e um valor (todo o conteúdo pertencente àquela chave). Você consegue recuperar um registro do seu banco de dados através da chave. Consultas por algum conteúdo através do valor não são permitidas.

A maioria dos bancos de dados Chave / Valor utilizam-se do recurso de armazenamento in-memory (memória RAM) e, com isso, o acesso aos dados é extremamente rápido. Alguns cuidados, porém, devem ser tomados na questão da persistência desses dados, uma vez que eles estarão em uma área de memória volátil, não fazendo um transbordo para o disco (por default). Essa volatilidade se dá porque a memória RAM é totalmente apagada quando os computadores são reiniciados ou desligados, ou seja, é uma área temporária.
Sistemas que requerem algum tipo de cache utilizam bastante essa classe de bancos de dados.

**********************************
Família de Colunas - Column Family

Subindo um pouco mais a complexidade dos dados armazenados, essa segunda classe armazena os dados como um conjunto de três "chaves": linha, coluna e timestamp . As linhas e colunas concentram os dados, e as diferentes versões desses dados são identificadas pelo timestamp .
Destaque para o conceito de masterless , ou seja, não existe um único servidor no cluster que concentra a escrita; essas operações são atendidas pelo servidor que estiver mais "próximo" de onde a operação vier.
Em sistemas em que dados analíticos em grande escala são o ponto-chave, o uso dessa classe é altamente recomendável.

**********************
Documentos - Document

A classe mais flexível e com ampla aderência em vários casos de uso.

Os dados são armazenados em estilo JSON, podendo ter vários níveis e subníveis, o que confere aos dados armazenados possibilidade de ter maior complexidade. A estrutura de um documento é muito parecida com o que armazenamos na classe Chave / Valor. Porém, com Documentos, não temos apenas uma chave e sim um conjunto de chaves e valores.

Por mais que schemaless seja um ponto presente na maioria dos bancos de dados NoSQL, na classe de Documentos temos esse conceito mais presente justamente pelo uso do JSON como padronização. Isso porque a inclusão, remoção ou alteração de tipos de dados são muito mais simples e fluídos utilizando JSON 
.
Sistemas que requerem uma gama muito grande de informações com diversos layouts e esquemas se encaixam muito bem nessa classe.

Grafos - Graph
A classe que consegue armazenar dados muito complexos. Os dados são compostos por nós (vértices do grafo), relacionamentos (arestas do grafo) e as propriedades ou atributos dos nós ou relacionamentos. Note que o relacionamento é o ponto central dessa classe. Nesses bancos de dados, o relacionamento é físico, sendo persistido como qualquer outro dado dentro do banco. Dessa forma, as consultas que requerem esses relacionamentos são extremamente performáticas.
Os Grafos estão muito mais presentes em seu dia a dia do que você possa imaginar. Empresas e aplicativos de transporte ou GPS, por exemplo, utilizam os algoritmos e bancos de dados de Grafos para diversas de suas operações, como encontrar o motorista mais perto de você, calcular o menor caminho de um ponto a outro e até mesmo fazer recomendações de produtos em sites de comércio eletrônico. Sistemas de recomendação e antifraude também têm encaixe perfeito para essa classe.

MongoDB - introdução

instalação
tipos de instalação
conceitos de databases
coleções
operadores
documentos
executar comandos leitura/escrita


Você será capaz de:

Instalar e conectar-se ao MongoDB

Listar databases e coleções

Executar operações de escrita ( inserts ) no banco de dados

Utilizar o método find() ;

Utilizar o método count() ;

Utilizar filtros simples;

Limitar a quantidade de documentos retornados;

"Pular" documentos;

Utilizar a projeção;

Fazer uma paginação simples combinando o métodos limit() e o skip().


Tipos de instalação

O MongoDB disponibiliza três tipos de instalação:

Standalone
Apenas indicada para ambientes de desenvolvimento.

Replica Set
Mínimo indicado para ambientes de produção. Nesse modelo, os dados são replicados em cada um dos servidores do cluster e temos apenas um ponto de escrita. Em alguns casos, podemos utilizar os demais servidores para escalar a leitura.

Shard
Esse é um modelo de instalação no qual podemos escalar a escrita de informações no banco. Os dados são divididos no cluster através de chaves de partição que chamamos de shard key . Essa chave pode ser composta por um ou mais atributos do documento, e sua escolha pode afetar a performance, eficiência e escalabilidade do banco. Escalar escritas significa dar mais capacidade para que o banco de dados processe mais dessas operações, aumentando assim a performance para essas operações.

******************
via terminal
instalação Standalone  
*********************

adicione chave pública ao nosso repsitório do mongodb
wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -

echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse

sudo apt-get update

sudo apt-get install -y mongodb-org

sudo service mongod start

sudo service mongod status

Os pacotes instalados

Você deve ter notado que, durante a instalação, alguns pacotes adicionais foram instalados:
mongodb-org-server : esse pacote contém o que podemos chamar de "servidor" do MongoDB. Contém todos os recursos necessários para que uma instância do banco seja executada;

mongodb-org-shell : o shell é onde você se conecta com o MongoDB, através do terminal. É uma interface que suporta JavaScript e é super completa para administração de instâncias e clusters;

mongodb-org-mongos : pronuncia-se "Mongo S" e só se faz necessário em ambientes Shard . Não entraremos em detalhes sobre ele agora;

mongodb-org-tools : esse pacote contém algumas ferramentas nativas do MongoDB. Por exemplo:
mongodump : ferramenta para extrair dados no formato BSON (falaremos deles mais adiante). Em alguns ambientes, pode fazer parte da estratégia de backup
mongorestore : ferramenta para restaurar backups gerados pelo mongodump
mongoimport : ferramenta para importar arquivos JSON , CSV ou TSV para uma instância do MongoDB
mongoexport : exporta dados de uma instância do MongoDB para arquivos JSON ou CSV

Executando o MongoDB Community Edition

Considerações sobre o ulimit

Alguns sistemas operacionais baseados em UNIX limitam os recursos de sistema que uma sessão pode utilizar. Esses limites têm grande impacto negativo para a operação do MongoDB, e em ambientes de produção devem ser observados com muita atenção. Veja a seção UNIX ulimit Settings da documentação do MongoDB para maiores informações.

Rever e definir limites de recursos 

https://docs.mongodb.com/manual/reference/ulimit/

ulimit

Você pode usar o ulimitcomando no prompt do sistema para verificar os limites do sistema, como no exemplo 
a seguir:

$ ulimit -a
-t: tempo de  CPU ( segundos )          ilimitado
-f: tamanho do arquivo ( blocos )          ilimitado
-d: tamanho do segmento de dados ( kbytes )      ilimitado
-s: tamanho da pilha ( kbytes )         8192 
-c: tamanho do arquivo principal ( blocos )     0 
-m: tamanho do conjunto residente ( kbytes ) ilimitado
-u: processos                   192276 
-n: descritores de arquivo            21000 
-l: tamanho bloqueado na memória ( kb ) ilimitado
-v: espaço de endereço ( kb )          ilimitado
-x: bloqueio de arquivo ilimitado
-i: sinais pendentes             192276 
-q: bytes em filas de msg POSIX   819200 
-e: max nice                    30 
-r: max rt prioridade             65 
-N 15 : ilimitado

Diretórios de trabalho

Se você instalou o MongoDB via apt (gerenciador de pacotes), então algumas configurações são executadas e mantidas em diretórios do sistema operacional. Por default , no Linux, os dados ficarão armazenados em /var/lib/mongodb , e o log de funcionamento, em /var/log/mongodb . No MacOS, os dados e os logs ficam em /usr/local/var/mongodb e /usr/local/var/log/mongodb , respectivamente.

Por padrão, o MongoDB roda utilizando a conta de usuário mongodb , que também foi criada durante a instalação. Se você quiser rodar uma instância com outro usuário, deverá dar as permissões para ele nos diretórios de dados e log.

Arquivo de configuração

O pacote oficial inclui um arquivo de configuração ( /etc/mongod.conf ). Essas configurações (como especificação dos caminhos dos diretórios de dados e log) têm efeito após o startup da instância. Logo, se você fizer qualquer modificação nesse arquivo com a instância do MongoDB rodando, deverá reiniciá-la para que tenha efeito.

Configurando a inicialização do servidor MONGODB

Por padrão, após a instalação, seu servidor vai estar configurado para não iniciar junto ao sistema. Caso queira ativar o início automático quando ligar o computador, utilize o comando:

sudo systemctl enable mongod.service

Caso não queira mais que isso aconteça para poupar memória RAM, você pode desativar o início automático utilizando o comando:

sudo systemctl disable mongod.service

Na primeira vez que for utilizar após iniciar o computador, será necessário iniciar o servidor com o comando:

sudo service mongod start

Informação importante

Por default , o MongoDB só permite conexões locais, ou seja, apenas de clients que estejam rodando na mesma máquina onde a instância estiver sendo executada. Para alterar essa configuração e permitir conexões remotas, veja IP Binding .


